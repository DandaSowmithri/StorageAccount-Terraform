# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Infra
  displayName: Deploy Infrastructure
  jobs:  
  - job: Infra
    displayName: Deploy Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformTaskV1@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '0.7.8'
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: -backend=false
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'Terraform-saw'
        backendAzureRmResourceGroupName: 'my-first-terraform-rg'
        backendAzureRmStorageAccountName: 'firststorage'
        backendAzureRmContainerName: 'test container1'
        backendAzureRmKey: 'terraform.tfstate'
        providerAzureRmSubscriptionId: 'LTTS_DevOps (488407a5-b2e4-4437-a2df-ae3d974d0375)'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'Terraform-saw'
        providerAzureRmSubscriptionId: 'LTTS_DevOps (488407a5-b2e4-4437-a2df-ae3d974d0375)'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'Terraform-saw'
        providerAzureRmSubscriptionId: 'LTTS_DevOps (488407a5-b2e4-4437-a2df-ae3d974d0375)'